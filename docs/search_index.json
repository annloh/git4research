[
["index.html", "Git 4 Research Chapter 1 Prerequisites 1.1 NOTE", " Git 4 Research Anna Lohmann 2020-05-18 Chapter 1 Prerequisites https://imgs.xkcd.com/comics/git.png In this introduction we will be mainly using git from the command line (Git BASH). Whereever beneficial we will using the built-in GUI tools gitk and git-gui. git-hub will be used for remote repositories. Should you prefer point and click options for using git you need to find yourself another tutorial. 1.1 NOTE I will be using pointy brackets &lt;&gt; to signify that you have to input whatever your files or names are such as: &lt;your name&gt;, &lt;filename&gt; or &lt;branch name&gt;. The brackets themselves have to be omitted when replacing this placeholder. "],
["getting-started.html", "Chapter 2 Getting started 2.1 Installing git 2.2 Getting a git-hub account 2.3 What is Git? 2.4 Why use git?", " Chapter 2 Getting started 2.1 Installing git You will need to install git. How to do this is explained here: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git ##Initial setup After the installation there are a few customizations that only have to be done once (well once on every computer you work with). They involve telling git your name, your e-mailaddress, your favourite text editor and linking to your git-hub account. If you are planning on collaborating with people who use a different operating system than you, it is wise to also tell git how to handle line endings. 2.1.1 Setting the configuration information Rightclick anywhere in a filebrowser and click “Git BASH HERE” This will open a command line where you will have to enter the following information: $ git config --global user.name \"&lt;Your name&gt;\" $ git config --global user.email \"&lt;your email address&gt;\" The editor to change commit messages is usually whatever you have as a default associated to .txt files you can change it like this $ git config --global core.editor \"&lt;name of my favourite editor&gt;\" Instead of --global you can use --local for a repository or --system for your computer only. This might make sense when you might be commititing changes under an alias e.g. for a collaborator who can’t use git (see section xyx for more details). Alternatively open git gui by typing $ git gui in the command line GitGUI will open click the tab “Edit” and then “Options” How to prevent git from demanding your GitHub user name and password all the time can be read here: https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh There are a few more options that are smart to set. You can open the config file in an editor like this: $ git config --global -e --edit ###Prevent problems with line ending (important for collaboration across operating systems) transforms windows line endings into linux line endings upon adding CRLF = Windows line endings LF = unix and mac line endings git config --global core.autocrlf input 2.2 Getting a git-hub account Get a GitHub account here: https://github.com/join If you are a student or a university researcher you might be elligible for a free pro account. Check out your options here: Many people think of Github as a dropbox for code. While this is relatively far from the truth it is not entirely inacurate. If so then Github is a dropbox on speed. 2.3 What is Git? distributed version-control system most widely used modern version control system in the world most recognized and popular approach to contribute to a project not just for code but for any text-based projects 2.4 Why use git? Version control Keep track of how a project evolved Undo mistakes Maintain alternative versions Test new features without breaking anything Private Collaboration (within lab or with collaborators) Public collaboration (with the research field) Decentralized i.e. you don’t have to be connected to a server to use git (unlike google docs or overleaf) Git encourages the use of a transparant and reviewed workflow 2.4.1 Examples of common academic text based files that can be tracked with git *.txt (Textfiles) *.R (R File) *.Rmd (R Markdown document) *.csv (Comma delimited value files) *.tex (Latex files) *.bib (Bibliographie files) *.sps (SPSS Analysis files) 2.4.2 Limitations Git only works “properly” with text based file-types. Any file can be tracked Git weill only be able to display and merge changes with text-based files The git history includes copies of all past versions so larger file types blow up your repository Git is not a backup-system (unless you also upload your repository to a remote server) If you deleted a repository it is gone 2.4.3 Caveat Depending on when you start managing a project as a git repository collaborators or people on the internet can see every single change you have ever made to the file. This has been used against people in the past. There are ways to prevent this. - Only upload a close to final version to github - Colllaborate on private repositories and create a new public repository once the project is in a presentable state - Write a disclaimer in the readme that the amount of project contribution cannot be inferred from the project history. 2.4.4 Is it for me? Do you have several versions of something but no idea what the difference between them is or how they evolved? Do you find yourself copying large sections of code to play with it, try something our wihtout breaking what you already accomplished? Have you ever changed something in multiple parts of your code only to figure out that that was a bad idea and the first aproach was better? Have you ever worked on code with multiple people and have no idea who wrote a specific part? "],
["the-command-line.html", "Chapter 3 The command line 3.1 Open Git BASH 3.2 General notes regarding the commad line 3.3 Other useful command line knowledge:", " Chapter 3 The command line The command line (aka Git BASH or console) is how we tell git what to do. If you are familiar with using a command line in LINUX this one will be just the same. You can change directories, list files and so on. In this into I will not assume that you have any knowlege of how to use the commandline (i.e. change directories and such) so we will always open it right in the folder we want to use it. 3.1 Open Git BASH Use your file explorer to navigate to the folder you want to version control with git. Rightclick anywhere in a filebrowser and click “Git BASH HERE” This will open a command line where you will have to enter the the commands that you find in this introduction. 3.2 General notes regarding the commad line The following should be kept in mind when usind the command line to not go completely crazy in the process: - Capitalization matters - Spacing matters - Some shortcuts like Ctrl+c or Ctrl+v won’t work. You can use the right mouse key instead - The tab key is your best friend as it will auto-complete or partially autocomplete anything for you which greatly reduces the risk for typos - The up-key is your second best friend. Pressing the up-key will automatically input the last command used. This is especially useful if you got an error and just need to slightly adjust the previous input. 3.3 Other useful command line knowledge: touch filename.txt creates a file &amp; at the end of a line will make sure you can keep using the command line without closing whatever you opened "],
["basic-concepts.html", "Chapter 4 Basic concepts 4.1 Working directory 4.2 Staging area 4.3 History 4.4 Remote 4.5 Stash", " Chapter 4 Basic concepts If you understand these basic concepts you are well equipped to conquer git. 4.1 Working directory 4.2 Staging area 4.3 History 4.4 Remote 4.5 Stash "],
["talking-to-git.html", "Chapter 5 Talking to git 5.1 Getting help 5.2 gitk", " Chapter 5 Talking to git Your main way of communicating with git is the command line. Every interaction with git works in the same way. Determine which repository you are currently working with. Open Git bash in the folder that contains that repository. Tell git what to do. Step 3 always consists of typing git &lt;verb&gt; and hitting enter. Often the verb is followed by more or less obscure other things that specify the way in which git should do the verb. Examples git commit -m '&lt;commit message&gt;' git add &lt;hallo_world.txt&gt; git checkout -b git clean -n If you are familiar with the linux command line these letters will probably make sense to you. If you are not you can either live with the fact, that what you are typing makes little obvious sense or read up on it here: 5.1 Getting help If you forgot the precise command that you wanted to use you can of course google it. Put git also comes with a build in help. git help &lt;verb&gt; or git &lt;verb&gt; --help I’d generally recommend to google things until you feel halfway confident as the git help is not exactly written for beginners. In this introduction we will cover 3 more ways to interact with git. They will be introdiced because they make your life easier for certain tasks plus they give you an additional sense of control by visually confirming what has happend. 5.2 gitk You can open gitk by typing gitk --all &amp; This will make what you see a little prettier as it sorts by date-order gitk --all --date-order &amp; This will open a new window with gitk. The &amp; at the end of the line will allow you to keep using the command line while having the gitk window open. gitk allows you to get a good overview of your repository history. Feel free to look around and see what happens if you click certain things. ##gitGUI ##kdiff3 "],
["initiating-a-repository.html", "Chapter 6 Initiating a repository 6.1 Clone existing repository 6.2 Fork existing repository 6.3 Create a new local repository", " Chapter 6 Initiating a repository We will introduce two simple ways to version control your work with git. There are more but these should get you started: 6.1 Clone existing repository This is the easiest way to start a project that you also want to maintain on github or that you want to collaborate on. You go to a repository on github and clone it. This can either be an existing repository that a colleague added you to as a collaborator or you can create a new empty repository on github to start a project. Here the step by step instructions: 6.2 Fork existing repository https://dzone.com/storage/temp/8374694-forked.png 6.3 Create a new local repository If you want to only track your work locally you can create a new repository like this: ##!Caveat Do not clone a remote repository that you do not have writing access to. What you should do instead is fork it. Which we cover here: "],
["git-commands-for-the-local-repository.html", "Chapter 7 Git commands for the local repository", " Chapter 7 Git commands for the local repository git init will create a .git folder which is hidden. This initializes a repository git add will put files in a staging area git status will show differences between staging area and working tree git commit will take everything that is in the staging area and put in in the local repository git clean -f deletes all untracked files #Git commands for the remote repository git push will take your commit and take it to a remote repository (e.g. github) git pull will get the latest changes from a remote repository git clone will copy a remote repository to your local folder "],
["commits.html", "Chapter 8 Commits 8.1 What is a commit? 8.2 Commit messages 8.3 When to commit?", " Chapter 8 Commits 8.1 What is a commit? If you decide to commit your staged files git will take a snapshot of the new status and add it to the repository. This snapshot will come with a unique sha1 hash. This unique hash can be used to refer to this snapshot in the future. Technically, a commit refers to all the file content, plus the history up to that point, plus all the metadata, which is represented by the hash created from all of this. When people taking about the “content of a commit” oder “reverting the commit” what they actually mean are the changes introduced by this commit so the diff to the previous commit. git commit Opens an editor and lets you enter your commit message The message should not be longer than 50 character and summarize what the commit does. This is the first line in the editor. In a new line more information can be added that provides more details. The open editor will also show a ton of information preceden by a #. This information is not part of the commit message. A shortcut, that lets you enter the commit message in the command line is git commit -m \"&lt;Add commit message here&gt;\" 8.2 Commit messages https://imgs.xkcd.com/comics/git_commit_2x.png 8.2.1 Content of Commit messages There are a few simple rules that you should follow when writing commit messages https://chris.beams.io/posts/git-commit/ 8.2.2 Styling Commit messages You can decorate your commit messages with emojis. An overview can be found here: https://www.webfx.com/tools/emoji-cheat-sheet/ While some emojis are really useful and ease communication others might be less useful Some fruthermore have a really long definiton which takes up valuable space in the commit message. If you would like to use emojis in your commit messages decide on a set of icons and their use together with your collaborators. Here a few ideas of how they can be used: 8.3 When to commit? A difficult decision is at what point to commit. What amount of changes define a useful set to commit? First of all the change introduced by a commit should be logical and coherent. So changing three typos adding a comment and defining a new function is neither logical nor coherent. These changes should be in different commmits. On the other hand commiting frequently, i.e. keeping the commits small is beneficial for collaboration (less time for others to change stuff creating merge conflics) and also good from a backup perspective. Furthermore, it is easier to undo small things than large things. However, the amount of things changed does not have to be one. If you, for example, decide to use a different estimator and therefor have to change a lot of code that could still be a coherent set of changes. “Use estimator abc instead of estimator xyz”. More information about the size of a commit can be found here: https://curiousprogrammer.io/blog/why-i-create-atomic-commits-in-git "],
["branching.html", "Chapter 9 Branching 9.1 Creating a new branch 9.2 Switching branches 9.3 Fetching changes after pull request 9.4 Push against resistence 9.5 You ammended after pushing to the remote", " Chapter 9 Branching https://i.imgur.com/YG8In8X.png 9.1 Creating a new branch $ git branch &lt;new branch&gt; creates a new branch but does not check it out (i.e. does not switch to it) Create a new branch and imediately check it out $ git checkout -b &lt;new-branch&gt; This will get you a new local branch. It is however not automatically availible on the remote. This can be acchieved as following: $ git push origin &lt;new-branch&gt; 9.2 Switching branches git checkout &lt;branchname you want to work on&gt; Creating a new branch locally does not result in the remote having the same branch (and the other way around). 9.3 Fetching changes after pull request $ git fetch --prune Deletes references to remote branches which have been deleted on the server $ git merge --ff-only Gives a warning if the merge is not a fast-forward merge and does not go through with it $ git merge --no-ff Does fast-forward but creates a merge commit #Merging #Problem solving 9.4 Push against resistence https://i.imgflip.com/lrihf.jpg 9.5 You ammended after pushing to the remote Git will not let you push after ammending because the ammend changed the commit and it does not match the remote one anymore. Git hence recommends that you pull first. That is not what you want because you have just changed that lst commit with ammend. You will hence have to force the push. git push --force-with-lease This way of forcing the push is preferred over push -f because the with-lease will check whether there are any additional changes on the remote that you had not fetched yet "],
["diff.html", "Chapter 10 Diff 10.1 Comparing current changes 10.2 Comparing arbitrary diffs", " Chapter 10 Diff 10.1 Comparing current changes git diff show differences between the working directory and the index git diff --cached show difference between the index and the most recent commit git diff HEAD show differences beween your working directory and the most recent commit All of the commands aboven can be combined with a filename to limit it to the diff of that file, i.e. git diff &lt;filename&gt; 10.2 Comparing arbitrary diffs git diff &lt;partial hash&gt;..&lt;partial hash&gt; git diff &lt;branch1&gt;..&lt;branch2&gt; This can also be combined with a filename: git diff &lt;branch1&gt;..&lt;branch2&gt; &lt;filename&gt; How to read a diff is nicely explained here: https://www.git-tower.com/learn/git/ebook/en/command-line/advanced-topics/diffs ##Difftool A difftool is a program that facilitates viewing a diff. If you replace the diff in the git diff command by difftool the difftool will open in s new window and show the requested diff. Adding a &amp; to the end of the line allows you to keep using the commandline with the difftool open. git difftool &amp; opens the predefined difftool (In my case “kdiff3”) shows index on the left and working directory on the right git difftool HEAD &amp; show differences beween your working directory and the most recent commit most recent commit is on the left and working directory on the right "],
["blame.html", "Chapter 11 Blame 11.1 Figuring our who is responsible", " Chapter 11 Blame https://img.devrant.com/devrant/rant/r_811491_uTXmv.jpg 11.1 Figuring our who is responsible git blame #Git workflow ##Feature branches ##Pull requests When you have done some work on a feature branch and would like to incorporate those changes into the master brach it is good practice to send a pull request (rather then push to teh master branch). A pull request is a message that lets your collaborators now that a substancial part is ready and can be reviewed. This can initiate a conversation about the suggested changes. More on pull requests here: https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests#draft-pull-requests ##Tipps to make life with git easier - submit frequently - keep lines short (i.e. less than 80 characters when coding, one sentence when wiring in latex) "],
["collaboration-hacks.html", "Chapter 12 Collaboration Hacks 12.1 Hack 1: Dropbox (Or other cloud storage) 12.2 Hack 2: Overleaf 12.3 Pro Git 12.4 YouTube videos 12.5 Troubleshooting 12.6 Cheat Sheet 12.7 More Info on specific topics 12.8 Atomic Commits 12.9 Commit messages", " Chapter 12 Collaboration Hacks What if my collaborators can’t use git? 12.1 Hack 1: Dropbox (Or other cloud storage) Create a git repository for them in a dropbox or similar cloud storage. Set the name and emailadress to match the collaborator. Create a branch for them to work on and make sure that brach is checked out. When they are done working send a pull request for their branch. Or merely look at the diff and decide what you want to keep. Advantage: You are in full control of what can be done to that repositorysince you have full access. Should you have found some mistakes you can update your collaborators version Disadvantage: Potentially messy. 12.2 Hack 2: Overleaf Overleaf can be set up to push to github. Furthermore, you can clone the whole project. #Other peoples code You have found something on github (or elsewhere on the internet) and would like to use it as a template? Great! Answer the following questions to ensure proper acknowledgement of your sources: ###Are you improving a product and would the original author benefir from your improvements? Fork the repository. You will know have a replica of the original (same name, complete history). However, this is now your personal copy. It will show the original authors as contributors and everyone can see when and where you started modifying the original. As git still knows the original history you can make changes to the repository and send a pull request to the original authors inviting them to incorporate your changes. See here for more info on that: https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request-from-a-fork ###Are you just stealing some code to get you started? Download the files and start your own repository. The complete history is now gone. It is not apparent that other people have been working on this in the past. For reasons of transparency and acknowledgement do the following: In your initial commit message add the url from where you got the code and the sha-1 hash which indicates the exact commit that served as the source. You can additionally mention the source in the README.Md. Saving the hash of the original source also allowes you to obtain updates that the original author might add in the future. (We will not cover how to do this in this intro.) #Ressources 12.3 Pro Git This free ebook is an excellent ressource for anything git related and very well explained: https://git-scm.com/book/en/v2 12.4 YouTube videos This tutorial by Cory Scafer covers all the basics https://www.youtube.com/watch?v=HVsySz-h9r4 Git Tutorial: Fixing Common Mistakes and Undoing Bad Commits https://www.youtube.com/watch?v=FdZecVxzJbk I have also enjoyed the three part YouTube git series by David Mahler with great examples. It has a slightly higher speed than the above, for more impatient folks. https://www.youtube.com/watch?v=uR6G2v_WsRA https://www.youtube.com/watch?v=FyAAIHHClqI https://www.youtube.com/watch?v=Gg4bLk8cGNo&amp;t=85s Both are based on the ProGit book and cover the most important concepts in a very approachable way. 12.5 Troubleshooting Here are a few ressources about dealing with common problems: https://ohshitgit.com/ 12.6 Cheat Sheet https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf 12.7 More Info on specific topics 12.8 Atomic Commits https://curiousprogrammer.io/blog/why-i-create-atomic-commits-in-git 12.9 Commit messages https://chris.beams.io/posts/git-commit/ 12.9.1 Rebasing https://www.atlassian.com/git/tutorials/merging-vs-rebasing https://www.youtube.com/watch?v=6nolZKpiG_w 12.9.2 Stashing https://www.youtube.com/watch?v=KLEDKgMmbBI "]
]
